#include <Rcpp.h>
#include <string>
#include <vector>
#include <map>
#include <algorithm>
#include <limits>

using namespace std;
using namespace Rcpp;

// Amino acid to index mapping
const map<char, int> aa_to_index = {
  {'A', 0}, {'R', 1}, {'N', 2}, {'D', 3}, {'C', 4},
  {'Q', 5}, {'E', 6}, {'G', 7}, {'H', 8}, {'I', 9},
  {'L',10}, {'K',11}, {'M',12}, {'F',13}, {'P',14},
  {'S',15}, {'T',16}, {'W',17}, {'Y',18}, {'V',19}
};

const int BLOSUM62[20][20] = {
  { 4,-1,-2,-2, 0,-1,-1, 0,-2,-1,-1,-1,-1,-2,-1, 1, 0,-3,-2, 0},  // A
  {-1, 5, 0,-2,-3, 1, 0,-2, 0,-3,-2, 2,-1,-3,-2,-1,-1,-3,-2,-3},  // R
  {-2, 0, 6, 1,-3, 0, 0,-1, 1,-3,-3, 0,-2,-3,-2, 1, 0,-4,-2,-3},  // N
  {-2,-2, 1, 6,-3, 0, 2,-1,-1,-3,-4,-1,-3,-3,-1, 0,-1,-4,-3,-3},  // D
  { 0,-3,-3,-3, 9,-3,-4,-3,-3,-1,-1,-3,-1,-2,-3,-1,-1,-2,-2,-1},  // C
  {-1, 1, 0, 0,-3, 5, 2,-2, 0,-3,-2, 1, 0,-3,-1, 0,-1,-2,-1,-2},  // Q
  {-1, 0, 0, 2,-4, 2, 5,-2, 0,-3,-3, 1,-2,-3,-1, 0,-1,-3,-2,-2},  // E
  { 0,-2,-1,-1,-3,-2,-2, 6,-2,-4,-4,-2,-3,-3,-2, 0,-2,-2,-3,-3},  // G
  {-2, 0, 1,-1,-3, 0, 0,-2, 8,-3,-3,-1,-2,-1,-2,-1,-2,-2, 2,-3},  // H
  {-1,-3,-3,-3,-1,-3,-3,-4,-3, 4, 2,-3, 1, 0,-3,-2,-1,-3,-1, 3},  // I
  {-1,-2,-3,-4,-1,-2,-3,-4,-3, 2, 4,-2, 2, 0,-3,-2,-1,-2,-1, 1},  // L
  {-1, 2, 0,-1,-3, 1, 1,-2,-1,-3,-2, 5,-1,-3,-1, 0,-1,-3,-2,-2},  // K
  {-1,-1,-2,-3,-1, 0,-2,-3,-2, 1, 2,-1, 5, 0,-2,-1,-1,-1,-1, 1},  // M
  {-2,-3,-3,-3,-2,-3,-3,-3,-1, 0, 0,-3, 0, 6,-4,-2,-2, 1, 3,-1},  // F
  {-1,-2,-2,-1,-3,-1,-1,-2,-2,-3,-3,-1,-2,-4, 7,-1,-1,-4,-3,-2},  // P
  { 1,-1, 1, 0,-1, 0, 0, 0,-1,-2,-2, 0,-1,-2,-1, 4, 1,-3,-2,-2},  // S
  { 0,-1, 0,-1,-1,-1,-1,-2,-2,-1,-1,-1,-1,-2,-1, 1, 5,-2,-2, 0},  // T
  {-3,-3,-4,-4,-2,-2,-3,-2,-2,-3,-2,-3,-1, 1,-4,-3,-2,11, 2,-3},  // W
  {-2,-2,-2,-3,-2,-1,-2,-3, 2,-1,-1,-2,-1, 3,-3,-2,-2, 2, 7,-1},  // Y
  { 0,-3,-3,-3,-1,-2,-2,-3,-3, 3, 1,-2, 1,-1,-2,-2, 0,-3,-1, 4},  // V
};


const int BLOSUM45[20][20] = {
  { 5,-2,-1,-2,-1,-1,-1, 0,-2,-1,-1,-1,-1,-2,-1, 1, 0,-2,-2, 0},
  {-2, 7, 0,-1,-3, 1, 0,-2, 0,-3,-2, 3,-1,-2,-2,-1,-1,-2,-1,-2},
  {-1, 0, 6, 2,-2, 0, 0, 0, 1,-2,-3, 0,-2,-2,-2, 1, 0,-4,-2,-3},
  {-2,-1, 2, 7,-3, 0, 2,-1, 0,-4,-3, 0,-3,-4,-1, 0,-1,-4,-2,-3},
  {-1,-3,-2,-3,12,-3,-3,-3,-3,-3,-2,-3,-2,-2,-4,-1,-1,-5,-3,-1},
  {-1, 1, 0, 0,-3, 6, 2,-2, 1,-2,-2, 1, 0,-4,-1, 0,-1,-2,-1,-3},
  {-1, 0, 0, 2,-3, 2, 6,-2, 0,-3,-2, 1,-2,-3, 0, 0,-1,-3,-2,-3},
  { 0,-2, 0,-1,-3,-2,-2, 7,-2,-4,-3,-2,-2,-3,-2, 0,-2,-2,-3,-3},
  {-2, 0, 1, 0,-3, 1, 0,-2,10,-3,-2,-1, 0,-2,-2,-1,-2,-3, 2,-3},
  {-1,-3,-2,-4,-3,-2,-3,-4,-3, 5, 2,-3, 2, 0,-2,-2,-1,-2, 0, 3},
  {-1,-2,-3,-3,-2,-2,-2,-3,-2, 2, 5,-3, 2, 1,-3,-3,-1,-2, 0, 1},
  {-1, 3, 0, 0,-3, 1, 1,-2,-1,-3,-3, 5,-1,-3,-1,-1,-1,-2,-1,-2},
  {-1,-1,-2,-3,-2, 0,-2,-2, 0, 2, 2,-1, 6, 0,-2,-2,-1,-2, 0, 1},
  {-2,-2,-2,-4,-2,-4,-3,-3,-2, 0, 1,-3, 0, 8,-3,-2,-1, 1, 3, 0},
  {-1,-2,-2,-1,-4,-1, 0,-2,-2,-2,-3,-1,-2,-3, 9,-1,-1,-3,-3,-3},
  { 1,-1, 1, 0,-1, 0, 0, 0,-1,-2,-3,-1,-2,-2,-1, 4, 2,-4,-2,-1},
  { 0,-1, 0,-1,-1,-1,-1,-2,-2,-1,-1,-1,-1,-1,-1, 2, 5,-3,-1, 0},
  {-2,-2,-4,-4,-5,-2,-3,-2,-3,-2,-2,-2,-2, 1,-3,-4,-3,15, 3,-3},
  {-2,-1,-2,-2,-3,-1,-2,-3, 2, 0, 0,-1, 0, 3,-3,-2,-1, 3, 8,-1},
  { 0,-2,-3,-3,-1,-3,-3,-3,-3, 3, 1,-2, 1, 0,-3,-1, 0,-3,-1, 5}
};


const int BLOSUM50[20][20] = {
  { 5,-2,-1,-2,-1,-1,-1, 0,-2,-1,-2,-1,-1,-3,-1, 1, 0,-3,-2, 0},
  {-2, 7,-1,-2,-4, 1, 0,-3, 0,-4,-3, 3,-2,-3,-3,-1,-1,-3,-1,-3},
  {-1,-1, 7, 2,-2, 0, 0, 0, 1,-3,-4, 0,-2,-4,-2, 1, 0,-4,-2,-3},
  {-2,-2, 2, 8,-4, 0, 2,-1,-1,-4,-4,-1,-4,-5,-1, 0,-1,-5,-3,-4},
  {-1,-4,-2,-4,13,-3,-3,-3,-3,-2,-2,-3,-2,-2,-4,-1,-1,-5,-3,-1},
  {-1, 1, 0, 0,-3, 7, 2,-2, 1,-3,-2, 2, 0,-4,-1, 0,-1,-1,-1,-3},
  {-1, 0, 0, 2,-3, 2, 6,-3, 0,-4,-3, 1,-2,-3,-1,-1,-1,-3,-2,-3},
  { 0,-3, 0,-1,-3,-2,-3, 8,-2,-4,-4,-2,-3,-4,-2, 0,-2,-3,-3,-4},
  {-2, 0, 1,-1,-3, 1, 0,-2,10,-4,-3, 0,-1,-1,-2,-1,-2,-3, 2,-4},
  {-1,-4,-3,-4,-2,-3,-4,-4,-4, 5, 2,-3, 2, 0,-3,-3,-1,-3,-1, 4},
  {-2,-3,-4,-4,-2,-2,-3,-4,-3, 2, 5,-3, 3, 1,-4,-3,-1,-2,-1, 1},
  {-1, 3, 0,-1,-3, 2, 1,-2, 0,-3,-3, 6,-2,-4,-1, 0,-1,-3,-2,-3},
  {-1,-2,-2,-4,-2, 0,-2,-3,-1, 2, 3,-2, 7, 0,-3,-2,-1,-1, 0, 1},
  {-3,-3,-4,-5,-2,-4,-3,-4,-1, 0, 1,-4, 0, 8,-4,-3,-2, 1, 4,-1},
  {-1,-3,-2,-1,-4,-1,-1,-2,-2,-3,-4,-1,-3,-4,10,-1,-1,-4,-3,-3},
  { 1,-1, 1, 0,-1, 0,-1, 0,-1,-3,-3, 0,-2,-3,-1, 5, 2,-4,-2,-2},
  { 0,-1, 0,-1,-1,-1,-1,-2,-2,-1,-1,-1,-1,-2,-1, 2, 5,-3,-2, 0},
  {-3,-3,-4,-5,-5,-1,-3,-3,-3,-3,-2,-3,-1, 1,-4,-4,-3,15, 2,-3},
  {-2,-1,-2,-3,-3,-1,-2,-3, 2,-1,-1,-2, 0, 4,-3,-2,-2, 2, 8,-1},
  { 0,-3,-3,-4,-1,-3,-3,-4,-4, 4, 1,-3, 1,-1,-3,-2, 0,-3,-1, 5}
};

const int BLOSUM80[20][20] = {
  { 7,-3,-3,-3,-1,-2,-2, 0,-3,-3,-3,-1,-2,-4,-1, 2, 0,-5,-4,-1},
  {-3, 9,-1,-3,-6, 1,-1,-4, 0,-5,-4, 3,-3,-5,-3,-2,-2,-5,-4,-4},
  {-3,-1, 9, 2,-5, 0,-1,-1, 1,-6,-6, 0,-4,-6,-4, 1, 0,-7,-4,-5},
  {-3,-3, 2,10,-7,-1, 2,-3,-2,-7,-7,-2,-6,-6,-3,-1,-2,-8,-6,-7},
  {-1,-6,-5,-7,13,-5,-7,-6,-7,-2,-3,-6,-3,-4,-6,-2,-2,-5,-5,-2},
  {-2, 1, 0,-1,-5, 9, 3,-4, 1,-5,-4, 2,-1,-5,-3,-1,-1,-4,-3,-4},
  {-2,-1,-1, 2,-7, 3, 8,-4, 0,-6,-6, 1,-4,-6,-2,-1,-2,-6,-5,-4},
  { 0,-4,-1,-3,-6,-4,-4, 9,-4,-7,-7,-3,-5,-6,-5,-1,-3,-6,-6,-7},
  {-3, 0, 1,-2,-7, 1, 0,-4,12,-6,-5,-1,-4,-2,-4,-2,-3,-4, 3,-5},
  {-3,-5,-6,-7,-2,-5,-6,-7,-6, 7, 2,-5, 2,-1,-5,-4,-2,-5,-3, 4},
  {-3,-4,-6,-7,-3,-4,-6,-7,-5, 2, 6,-4, 3, 0,-5,-4,-3,-4,-2, 1},
  {-1, 3, 0,-2,-6, 2, 1,-3,-1,-5,-4, 8,-3,-5,-2,-1,-1,-6,-4,-4},
  {-2,-3,-4,-6,-3,-1,-4,-5,-4, 2, 3,-3, 9, 0,-4,-3,-1,-3,-3, 1},
  {-4,-5,-6,-6,-4,-5,-6,-6,-2,-1, 0,-5, 0,10,-6,-4,-4, 0, 4,-2},
  {-1,-3,-4,-3,-6,-3,-2,-5,-4,-5,-5,-2,-4,-6,12,-2,-3,-7,-6,-4},
  { 2,-2, 1,-1,-2,-1,-1,-1,-2,-4,-4,-1,-3,-4,-2, 7, 2,-6,-3,-3},
  { 0,-2, 0,-2,-2,-1,-2,-3,-3,-2,-3,-1,-1,-4,-3, 2, 8,-5,-3, 0},
  {-5,-5,-7,-8,-5,-4,-6,-6,-4,-5,-4,-6,-3, 0,-7,-6,-5,16, 3,-5},
  {-4,-4,-4,-6,-5,-3,-5,-6, 3,-3,-2,-4,-3, 4,-6,-3,-3, 3,11,-3},
  {-1,-4,-5,-7,-2,-4,-4,-7,-5, 4, 1,-4, 1,-2,-4,-3, 0,-5,-3, 7}
};


const int BLOSUM90[20][20] = {
  { 5,-2,-2,-3,-1,-1,-1, 0,-2,-2,-2,-1,-2,-3,-1, 1, 1,-4,-3,-1},
  {-2, 6,-1,-3,-5, 1, 0,-3, 0,-4,-3, 2,-2,-4,-3,-1,-2,-4,-3,-3},
  {-2,-1, 7, 1,-4, 0,-1,-1, 0,-4,-4, 0,-3,-4,-3, 0, 0,-5,-3,-4},
  {-3,-3, 1, 7,-5,-1, 1,-2,-2,-5,-5,-1,-4,-5,-3,-1,-2,-6,-4,-5},
  {-1,-5,-4,-5, 9,-4,-6,-4,-5,-2,-2,-4,-2,-3,-4,-2,-2,-4,-4,-2},
  {-1, 1, 0,-1,-4, 7, 2,-3, 1,-4,-3, 1,-1,-4,-2,-1,-1,-3,-3,-3},
  {-1, 0,-1, 1,-6, 2, 6,-3,-1,-4,-4, 0,-3,-5,-2,-1,-1,-5,-4,-3},
  { 0,-3,-1,-2,-4,-3,-3, 6,-3,-5,-5,-2,-4,-5,-3,-1,-3,-4,-5,-5},
  {-2, 0, 0,-2,-5, 1,-1,-3, 8,-4,-4,-1,-3,-2,-3,-2,-2,-3, 1,-4},
  {-2,-4,-4,-5,-2,-4,-4,-5,-4, 5, 1,-4, 1,-1,-4,-3,-1,-4,-2, 3},
  {-2,-3,-4,-5,-2,-3,-4,-5,-4, 1, 5,-3, 2, 0,-4,-3,-2,-3,-2, 0},
  {-1, 2, 0,-1,-4, 1, 0,-2,-1,-4,-3, 6,-2,-4,-2,-1,-1,-5,-3,-3},
  {-2,-2,-3,-4,-2,-1,-3,-4,-3, 1, 2,-2, 7,-1,-3,-2,-1,-2,-2, 0},
  {-3,-4,-4,-5,-3,-4,-5,-5,-2,-1, 0,-4,-1, 7,-4,-3,-3, 0, 3,-2},
  {-1,-3,-3,-3,-4,-2,-2,-3,-3,-4,-4,-2,-3,-4, 8,-2,-2,-5,-4,-3},
  { 1,-1, 0,-1,-2,-1,-1,-1,-2,-3,-3,-1,-2,-3,-2, 5, 1,-4,-3,-2},
  { 1,-2, 0,-2,-2,-1,-1,-3,-2,-1,-2,-1,-1,-3,-2, 1, 6,-4,-2,-1},
  {-4,-4,-5,-6,-4,-3,-5,-4,-3,-4,-3,-5,-2, 0,-5,-4,-4,11, 2,-3},
  {-3,-3,-3,-4,-4,-3,-4,-5, 1,-2,-2,-3,-2, 3,-4,-3,-2, 2, 8,-3},
  {-1,-3,-4,-5,-2,-3,-3,-5,-4, 3, 0,-3, 0,-2,-3,-2,-1,-3,-3, 5}
};

const int BLOSUM100[20][20] = {
  { 5,-2,-2,-3,-1,-1,-1, 0,-2,-2,-2,-1,-2,-3,-1, 1, 1,-4,-3,-1},
  {-2, 6,-1,-3,-5, 1, 0,-3, 0,-4,-3, 2,-2,-4,-3,-1,-2,-4,-3,-3},
  {-2,-1, 7, 1,-4, 0,-1,-1, 0,-4,-4, 0,-3,-4,-3, 0, 0,-5,-3,-4},
  {-3,-3, 1, 7,-5,-1, 1,-2,-2,-5,-5,-1,-4,-5,-3,-1,-2,-6,-4,-5},
  {-1,-5,-4,-5, 9,-4,-6,-4,-5,-2,-2,-4,-2,-3,-4,-2,-2,-4,-4,-2},
  {-1, 1, 0,-1,-4, 7, 2,-3, 1,-4,-3, 1,-1,-4,-2,-1,-1,-3,-3,-3},
  {-1, 0,-1, 1,-6, 2, 6,-3,-1,-4,-4, 0,-3,-5,-2,-1,-1,-5,-4,-3},
  { 0,-3,-1,-2,-4,-3,-3, 6,-3,-5,-5,-2,-4,-5,-3,-1,-3,-4,-5,-5},
  {-2, 0, 0,-2,-5, 1,-1,-3, 8,-4,-4,-1,-3,-2,-3,-2,-2,-3, 1,-4},
  {-2,-4,-4,-5,-2,-4,-4,-5,-4, 5, 1,-4, 1,-1,-4,-3,-1,-4,-2, 3},
  {-2,-3,-4,-5,-2,-3,-4,-5,-4, 1, 5,-3, 2, 0,-4,-3,-2,-3,-2, 0},
  {-1, 2, 0,-1,-4, 1, 0,-2,-1,-4,-3, 6,-2,-4,-2,-1,-1,-5,-3,-3},
  {-2,-2,-3,-4,-2,-1,-3,-4,-3, 1, 2,-2, 7,-1,-3,-2,-1,-2,-2, 0},
  {-3,-4,-4,-5,-3,-4,-5,-5,-2,-1, 0,-4,-1, 7,-4,-3,-3, 0, 3,-2},
  {-1,-3,-3,-3,-4,-2,-2,-3,-3,-4,-4,-2,-3,-4, 8,-2,-2,-5,-4,-3},
  { 1,-1, 0,-1,-2,-1,-1,-1,-2,-3,-3,-1,-2,-3,-2, 5, 1,-4,-3,-2},
  { 1,-2, 0,-2,-2,-1,-1,-3,-2,-1,-2,-1,-1,-3,-2, 1, 6,-4,-2,-1},
  {-4,-4,-5,-6,-4,-3,-5,-4,-3,-4,-3,-5,-2, 0,-5,-4,-4,11, 2,-3},
  {-3,-3,-3,-4,-4,-3,-4,-5, 1,-2,-2,-3,-2, 3,-4,-3,-2, 2, 8,-3},
  {-1,-3,-4,-5,-2,-3,-3,-5,-4, 3, 0,-3, 0,-2,-3,-2,-1,-3,-3, 5}
};


// Updated selection function
const int (*getSubstitutionMatrix(std::string matrixName))[20] {
  if (matrixName == "BLOSUM45") {
    return BLOSUM45;
  } else if (matrixName == "BLOSUM50") {
    return BLOSUM50;
  } else if (matrixName == "BLOSUM62") {
    return BLOSUM62;
  } else if (matrixName == "BLOSUM80") {
    return BLOSUM80;
  } else if (matrixName == "BLOSUM90") {
    return BLOSUM90;
  } else if (matrixName == "BLOSUM100") {
    return BLOSUM100;
  } else {
    Rcpp::stop("Invalid substitution matrix name: %s", matrixName);
  }
}

// Needleman-Wunsch algorithm with substitution matrix as parameter
double needleman_wunsch_score(const string &sequence1, const string &sequence2,
                              const int substitutionMatrix[20][20],
                                                              int gapOpen = 10, int gapExt = 4) {
  size_t m = sequence1.size();
  size_t n = sequence2.size();
  
  // Initialize matrices
  vector<vector<int>> M(m + 1, vector<int>(n + 1, 0));
  vector<vector<int>> Ix(m + 1, vector<int>(n + 1, std::numeric_limits<int>::min() / 2));
  vector<vector<int>> Iy(m + 1, vector<int>(n + 1, std::numeric_limits<int>::min() / 2));
  
  // Initialize first row and column
  M[0][0] = 0;
  Ix[0][0] = Iy[0][0] = std::numeric_limits<int>::min() / 2;
  for (size_t i = 1; i <= m; ++i) {
    M[i][0] = std::numeric_limits<int>::min() / 2;
    Ix[i][0] = -gapOpen - (i - 1) * gapExt;
    Iy[i][0] = std::numeric_limits<int>::min() / 2;
  }
  for (size_t j = 1; j <= n; ++j) {
    M[0][j] = std::numeric_limits<int>::min() / 2;
    Ix[0][j] = std::numeric_limits<int>::min() / 2;
    Iy[0][j] = -gapOpen - (j - 1) * gapExt;
  }
  
  // Fill matrices
  for (size_t i = 1; i <= m; ++i) {
    char aa1 = sequence1[i - 1];
    auto it1 = aa_to_index.find(aa1);
    if (it1 == aa_to_index.end()) {
      Rcpp::stop("Invalid amino acid in sequence1: %c", aa1);
    }
    int index1 = it1->second;
    for (size_t j = 1; j <= n; ++j) {
      char aa2 = sequence2[j - 1];
      auto it2 = aa_to_index.find(aa2);
      if (it2 == aa_to_index.end()) {
        Rcpp::stop("Invalid amino acid in sequence2: %c", aa2);
      }
      int index2 = it2->second;
      int score = substitutionMatrix[index1][index2];
      
      // Compute Ix[i][j]
      Ix[i][j] = std::max(
        M[i - 1][j] - (gapOpen + gapExt),
        Ix[i - 1][j] - gapExt
      );
      
      // Compute Iy[i][j]
      Iy[i][j] = std::max(
        M[i][j - 1] - (gapOpen + gapExt),
        Iy[i][j - 1] - gapExt
      );
      
      // Compute M[i][j]
      M[i][j] = std::max({
        M[i - 1][j - 1] + score,
        Ix[i - 1][j - 1] + score,
        Iy[i - 1][j - 1] + score
      });
    }
  }
  
  // The optimal alignment score
  int alignment_score = std::max({ M[m][n], Ix[m][n], Iy[m][n] });
  
  return static_cast<double>(alignment_score);
}

// [[Rcpp::export]]
NumericMatrix calculateSimilarityMatrix(CharacterVector sequences,
                                        string matrixName = "BLOSUM62",
                                        int gapOpen = 10, int gapExt = 4) {
  size_t n = sequences.length();
  NumericMatrix similarityMatrix(n, n);
  vector<double> scores; // To store all alignment scores
  
  // Get the substitution matrix
  const int (*substitutionMatrix)[20] = getSubstitutionMatrix(matrixName);
  
  // Compute alignment scores and collect them
  vector<vector<double>> alignmentScores(n, vector<double>(n, 0.0));
  
  for (size_t i = 0; i < n; ++i) {
    string seq1 = as<string>(sequences[i]);
    for (size_t j = i; j < n; ++j) {
      string seq2 = as<string>(sequences[j]);
      
      // Get alignment score
      double score = needleman_wunsch_score(seq1, seq2, substitutionMatrix, gapOpen, gapExt);
      alignmentScores[i][j] = score;
      alignmentScores[j][i] = score; // Symmetric
      
      scores.push_back(score);
    }
  }
  
  // Find min and max scores
  double minScore = *min_element(scores.begin(), scores.end());
  double maxScore = *max_element(scores.begin(), scores.end());
  
  // Avoid division by zero
  if (maxScore == minScore) {
    Rcpp::stop("All alignment scores are the same. Min-max normalization is not possible.");
  }
  
  // Normalize the scores using min-max normalization
  for (size_t i = 0; i < n; ++i) {
    for (size_t j = i; j < n; ++j) {
      double normScore = (alignmentScores[i][j] - minScore) / (maxScore - minScore);
      // Ensure the similarity is between 0 and 1
      normScore = std::max(0.0, std::min(1.0, normScore));
      similarityMatrix(i, j) = normScore;
      similarityMatrix(j, i) = normScore; // Symmetric
    }
  }
  
  // Add dimension names
  // Create numeric labels 1,2,3...
  CharacterVector labels(n);
  for(size_t i = 0; i < n; ++i) {
    labels[i] = std::to_string(i + 1);
  }
  
  // Add dimension names using numeric labels
  similarityMatrix.attr("dimnames") = List::create(labels, labels);
  
  return similarityMatrix;
}