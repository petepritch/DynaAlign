% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clusterbreak.R
\name{clusterbreak}
\alias{clusterbreak}
\title{Generate clusters with specified sizes using graph network and louvain method}
\usage{
clusterbreak(
  pep,
  thresh_p = 0.8,
  size_max = 10,
  size_min = 3,
  max_itr = 10000,
  sim_fn = function(x) similarityMH(x, k = 2, n_hash = 50),
  cluster_fn = function(x, ...) igraph::cluster_louvain(x, resolution = 1.05,
    ...)$membership,
  cluster_wt = TRUE
)
}
\arguments{
\item{pep}{A vector of amino acid sequences}

\item{thresh_p}{Quadrille of similarity score to set as threshold for adjacency}

\item{size_max}{Maximum size of cluster desired (default: size_max = 10)}

\item{size_min}{Minimum size of cluster desired (default: size_min = 3)}

\item{max_itr}{Maximum function calls wanted before halting function execution (default: max_itr = 500)}

\item{sim_fn}{Function for generating similarity matrix (default: similarityMH)}

\item{cluster_fn}{Function for network-based clustering compatible with igraph object that must output a numeric vector of cluster assignment (default: cluster_louvain)}

\item{cluster_wt}{Logical value for whether or not the cluster function takes in network weights in the function}
}
\value{
List containing:
\item{clustered_seq}{A nx2 matrix containging selected sequences with their cluster assignments}
\item{filtered_seq}{Filtered sequences}
}
\description{
Generate clusters with specified sizes using graph network and louvain method
}
\examples{
library(DynaAlign)
library(dplyr) # Ensure dplyr is loaded for the pipe operator

# Create mock dataset
h3n2sample <- data.frame(
  clade = sample(c("A", "B", "C"), 1000, replace = TRUE),
  sequence = replicate(1000, paste(sample(LETTERS, 10, replace = TRUE), collapse = ""))
)

# Select and prepare sequences
test <- h3n2sample \%>\%
  group_by(clade) \%>\%
  sample_frac(0.4) \%>\%
  distinct(sequence, .keep_all = TRUE)

# Cluster sequences
clusterbreak(
  pep = test$sequence,
  size_max = 800,
  thresh_p = 0.8,
  sim_fn = function(x) similarityMH(x, k = 4, n_hash = 500)
)
}
