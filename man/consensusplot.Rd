% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clusterbreak.R
\name{consensusplot}
\alias{consensusplot}
\title{Plot consensus sequences for each cluster in a clustered network}
\usage{
consensusplot(
  df,
  k_size = 2,
  hash_size = 50,
  threshold_p = 0.8,
  sens = 1.05,
  ...
)
}
\arguments{
\item{df}{Input clusterconsensus function output.}

\item{k_size}{Minhash kmer size.}

\item{hash_size}{Number of hash functions.}

\item{threshold_p}{Binary threshold for adjacency matrix.}

\item{sens}{Louvain algorithm sensitivity.}

\item{...}{Additional arguments passed to igraph plot function.}
}
\value{
A graph visualization of the consensus sequence network.
}
\description{
Plot consensus sequences for each cluster in a clustered network
}
\examples{
# Load necessary libraries
library(DynaAlign)
library(igraph)

# Create a mock clustered sequence matrix
clustered_seq <- matrix(c(
  "AAAA", "1",
  "AAAB", "1",
  "BBBB", "2",
  "BBBC", "2"
), ncol = 2, byrow = TRUE)

# Define a mock clusterconsensus function (for example purposes only)
clusterconsensus <- function(df) {
  unique_clusters <- unique(df[,2])
  consensus <- sapply(unique_clusters, function(cluster) {
    sequences <- df[df[,2] == cluster, 1]
    if(length(sequences) < 2){
      return(sequences)
    } else {
      # Simple consensus: return the first sequence as a placeholder
      return(sequences[1])
    }
  })
  return(data.frame(`Cluster ID` = unique_clusters, 
      `Consensus Sequence` = consensus, stringsAsFactors = FALSE))
}

# Define a mock minhash function (for example purposes only)
minhash <- function(sequences, k_size, hash_size) {
  # Create a random similarity matrix with higher similarity for identical sequences
  n <- length(sequences)
  mat <- matrix(runif(n^2, min = 0, max = 1), nrow = n)
  diag(mat) <- 1  # Similarity of a sequence with itself
  return(list(dist_matrix = mat))
}

# Generate consensus sequences
consensus_seq <- clusterconsensus(clustered_seq)

# Plot consensus sequences network
consensusplot(consensus_seq)
}
